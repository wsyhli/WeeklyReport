<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.liyuehong.weeklyreport.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.liyuehong.weeklyreport.model.User" >
    <id column="uid" property="id" jdbcType="INTEGER" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="enabled" property="enabled" jdbcType="TINYINT" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="regTime" property="regTime" jdbcType="TIMESTAMP" />
    <collection property="roles" ofType="com.liyuehong.weeklyreport.model.Role">
      <id column="role" property="nameZh"/>
    </collection>
  </resultMap>

  <sql id="Base_Column_List" >
    id, username, password, enabled, email, regTime
  </sql>
  <delete id="deleteUserById">
    delete from user where id = #{uid}
  </delete>
  <insert id="updateUserRolesById">
    insert into user_role (user_id, role_id) values
    <foreach item="item" collection="rids" separator=",">
      (#{uid}, #{item})
    </foreach>
  </insert>
  <select id="selectAllUsers" resultMap="BaseResultMap">
    SELECT u.`id` AS uid,u.username,u.`enabled`,u.`email`,u.`regTime`,r.`nameZh` AS role FROM `user` AS u, role AS r, user_role AS ur WHERE u.`id`=ur.`user_id` AND r.`id`=ur.`role_id`
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="loadUserByUsername" resultType="com.liyuehong.weeklyreport.model.User">
    select <include refid="Base_Column_List" /> from user where username=#{username}
  </select>
  <delete id="deleteUserRolesById">
    delete from user_role
    where user_id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="reg" useGeneratedKeys="true" keyProperty="id">
    insert into user (id, username, password, 
      enabled, email, regTime
      )
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{enabled,jdbcType=TINYINT}, #{email,jdbcType=VARCHAR}, #{regTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.liyuehong.weeklyreport.mapper.UserMapper" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="enabled != null" >
        enabled,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="regTime != null" >
        regTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="enabled != null" >
        #{enabled,jdbcType=TINYINT},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="regTime != null" >
        #{regTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.liyuehong.weeklyreport.mapper.UserMapper" >
    update user
    <set >
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="enabled != null" >
        enabled = #{enabled,jdbcType=TINYINT},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="regTime != null" >
        regTime = #{regTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateAccountStatus">
    update user
    set enabled = #{enabled}
    where id = #{uid}
  </update>
</mapper>